//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Code/InputManager/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""1a472a91-d61e-48eb-bc2c-f42d25892b32"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9fd6027c-6e5d-456c-9a05-0c5ceacd76bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""06f3d7f1-2f3c-4a20-a362-096a0e1a7e4c"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HandBreak"",
                    ""type"": ""Button"",
                    ""id"": ""83837e0a-b629-4f8c-b3c1-77b4b90957d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""01818f37-7df8-422a-8840-63e9e91721cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenUpgradeRoadmap"",
                    ""type"": ""Button"",
                    ""id"": ""1c6acacd-b18a-46c6-84b7-4d71f17ca0a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollRoadMap"",
                    ""type"": ""Value"",
                    ""id"": ""ac1d27f5-531b-489a-9b49-04edbc99ffa4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RevealEnemies"",
                    ""type"": ""Button"",
                    ""id"": ""9dda0454-10b1-45b2-89b8-d55022c1a027"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""41310bc5-70c2-4a4d-8f4c-b1404e284d33"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Direction"",
                    ""id"": ""d256e6d0-a8b4-4ae6-9237-6da097cf4562"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6e64a2e2-e20d-433e-a026-a59024c77051"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ccaebacd-6820-46da-8760-eca5c4c51257"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""45557758-b5f7-46b7-8720-c5cd6f15a70e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a5b325a9-92f0-4b88-a43f-f6f7ddfb6810"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Direction"",
                    ""id"": ""e5b99f88-b7d8-4175-96d0-fc3db9d8857d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ec5db34b-81f3-4690-9a67-676c0c3a9b9b"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""66a57fa9-f40e-4b9e-b07c-3572e037a44f"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1b46a0e0-6aa8-46ac-820a-de1f7b98db5e"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9302a8f2-e682-441d-ad4a-128ece6ea904"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b7107edf-78c4-4060-b005-cc2aa1b7fd01"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e9ea74e-c3c7-4bad-a26c-3826f7139a20"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a647bb69-fe4e-4fac-b2c6-1da01536a7cd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenUpgradeRoadmap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57bce3fa-a02f-4e6b-bf15-0f4b3ff3a30b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RevealEnemies"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5d4ac59-50e0-46cf-99e5-23754b5c0e12"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Hold"",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""ScrollRoadMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0758ccc3-9f8c-4b61-9b9f-3c58511ce9c2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollRoadMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""352777df-1c9f-4283-9bf5-e85932c4716e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_HandBreak = m_Player.FindAction("HandBreak", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_OpenUpgradeRoadmap = m_Player.FindAction("OpenUpgradeRoadmap", throwIfNotFound: true);
        m_Player_ScrollRoadMap = m_Player.FindAction("ScrollRoadMap", throwIfNotFound: true);
        m_Player_RevealEnemies = m_Player.FindAction("RevealEnemies", throwIfNotFound: true);
        m_Player_MousePos = m_Player.FindAction("MousePos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_HandBreak;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_OpenUpgradeRoadmap;
    private readonly InputAction m_Player_ScrollRoadMap;
    private readonly InputAction m_Player_RevealEnemies;
    private readonly InputAction m_Player_MousePos;
    public struct PlayerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @HandBreak => m_Wrapper.m_Player_HandBreak;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @OpenUpgradeRoadmap => m_Wrapper.m_Player_OpenUpgradeRoadmap;
        public InputAction @ScrollRoadMap => m_Wrapper.m_Player_ScrollRoadMap;
        public InputAction @RevealEnemies => m_Wrapper.m_Player_RevealEnemies;
        public InputAction @MousePos => m_Wrapper.m_Player_MousePos;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @HandBreak.started += instance.OnHandBreak;
            @HandBreak.performed += instance.OnHandBreak;
            @HandBreak.canceled += instance.OnHandBreak;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @OpenUpgradeRoadmap.started += instance.OnOpenUpgradeRoadmap;
            @OpenUpgradeRoadmap.performed += instance.OnOpenUpgradeRoadmap;
            @OpenUpgradeRoadmap.canceled += instance.OnOpenUpgradeRoadmap;
            @ScrollRoadMap.started += instance.OnScrollRoadMap;
            @ScrollRoadMap.performed += instance.OnScrollRoadMap;
            @ScrollRoadMap.canceled += instance.OnScrollRoadMap;
            @RevealEnemies.started += instance.OnRevealEnemies;
            @RevealEnemies.performed += instance.OnRevealEnemies;
            @RevealEnemies.canceled += instance.OnRevealEnemies;
            @MousePos.started += instance.OnMousePos;
            @MousePos.performed += instance.OnMousePos;
            @MousePos.canceled += instance.OnMousePos;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @HandBreak.started -= instance.OnHandBreak;
            @HandBreak.performed -= instance.OnHandBreak;
            @HandBreak.canceled -= instance.OnHandBreak;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @OpenUpgradeRoadmap.started -= instance.OnOpenUpgradeRoadmap;
            @OpenUpgradeRoadmap.performed -= instance.OnOpenUpgradeRoadmap;
            @OpenUpgradeRoadmap.canceled -= instance.OnOpenUpgradeRoadmap;
            @ScrollRoadMap.started -= instance.OnScrollRoadMap;
            @ScrollRoadMap.performed -= instance.OnScrollRoadMap;
            @ScrollRoadMap.canceled -= instance.OnScrollRoadMap;
            @RevealEnemies.started -= instance.OnRevealEnemies;
            @RevealEnemies.performed -= instance.OnRevealEnemies;
            @RevealEnemies.canceled -= instance.OnRevealEnemies;
            @MousePos.started -= instance.OnMousePos;
            @MousePos.performed -= instance.OnMousePos;
            @MousePos.canceled -= instance.OnMousePos;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnHandBreak(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnOpenUpgradeRoadmap(InputAction.CallbackContext context);
        void OnScrollRoadMap(InputAction.CallbackContext context);
        void OnRevealEnemies(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
    }
}
